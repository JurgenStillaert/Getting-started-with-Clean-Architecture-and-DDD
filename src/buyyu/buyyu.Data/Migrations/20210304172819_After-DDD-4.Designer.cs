// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using buyyu.Data;

namespace buyyu.Data.Migrations
{
    [DbContext(typeof(BuyyuDbContext))]
    [Migration("20210304172819_After-DDD-4")]
    partial class AfterDDD4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("buyyu.Domain.Order.OrderRoot", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("buyyu.Domain.Order.Orderline", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("buyyu.Domain.Order.Ref.OrderState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bd8be3d2-8028-45e2-a211-bf737a2508c1"),
                            Name = "Initiated",
                            ShortCode = "NEW"
                        },
                        new
                        {
                            Id = new Guid("82d9ce01-9f25-48b1-8af3-93f52426676f"),
                            Name = "Confirmed",
                            ShortCode = "CNF"
                        },
                        new
                        {
                            Id = new Guid("4b5549bb-b1b2-4964-9818-da984baab4ff"),
                            Name = "Shipped",
                            ShortCode = "SHP"
                        });
                });

            modelBuilder.Entity("buyyu.Domain.Payment.PaymentRoot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("buyyu.Domain.Product.ProductRoot", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de679c55-4c13-4fe7-91b4-69cbce3223a2")
                        },
                        new
                        {
                            Id = new Guid("32f75bce-16a0-4070-9fac-4289678c191f")
                        },
                        new
                        {
                            Id = new Guid("bcbc1851-6317-4022-be62-53d29c04bcda")
                        },
                        new
                        {
                            Id = new Guid("5ca659b1-25b1-45c1-9755-3a3cd8591b9e")
                        });
                });

            modelBuilder.Entity("buyyu.Domain.Warehouse.WarehouseRoot", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("de679c55-4c13-4fe7-91b4-69cbce3223a2")
                        },
                        new
                        {
                            ProductId = new Guid("32f75bce-16a0-4070-9fac-4289678c191f")
                        },
                        new
                        {
                            ProductId = new Guid("bcbc1851-6317-4022-be62-53d29c04bcda")
                        },
                        new
                        {
                            ProductId = new Guid("5ca659b1-25b1-45c1-9755-3a3cd8591b9e")
                        });
                });

            modelBuilder.Entity("buyyu.Domain.Order.OrderRoot", b =>
                {
                    b.OwnsOne("buyyu.Domain.Order.ClientId", "ClientId", b1 =>
                        {
                            b1.Property<Guid>("OrderRootId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ClientId");

                            b1.HasKey("OrderRootId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderRootId");
                        });

                    b.OwnsOne("buyyu.Domain.Order.OrderDate", "OrderDate", b1 =>
                        {
                            b1.Property<Guid>("OrderRootId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2")
                                .HasColumnName("OrderDate");

                            b1.HasKey("OrderRootId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderRootId");
                        });

                    b.OwnsOne("buyyu.Domain.Order.OrderState", "State", b1 =>
                        {
                            b1.Property<Guid>("OrderRootId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("State");

                            b1.HasKey("OrderRootId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderRootId");
                        });

                    b.OwnsOne("buyyu.Domain.Shared.Money", "PaidAmount", b1 =>
                        {
                            b1.Property<Guid>("OrderRootId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("PaidAmount");

                            b1.Property<string>("Currency")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PaidAmount_Currency");

                            b1.HasKey("OrderRootId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderRootId");
                        });

                    b.OwnsOne("buyyu.Domain.Shared.Money", "TotalAmount", b1 =>
                        {
                            b1.Property<Guid>("OrderRootId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TotalAmount");

                            b1.Property<string>("Currency")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("TotalAmount_Currency");

                            b1.HasKey("OrderRootId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderRootId");
                        });

                    b.Navigation("ClientId");

                    b.Navigation("OrderDate");

                    b.Navigation("PaidAmount");

                    b.Navigation("State");

                    b.Navigation("TotalAmount");
                });

            modelBuilder.Entity("buyyu.Domain.Order.Orderline", b =>
                {
                    b.HasOne("buyyu.Domain.Order.OrderRoot", "Order")
                        .WithMany("Lines")
                        .HasForeignKey("OrderId");

                    b.OwnsOne("buyyu.Domain.Shared.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("OrderlineId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Price");

                            b1.Property<string>("Currency")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Price_Currency");

                            b1.HasKey("OrderlineId");

                            b1.ToTable("OrderLines");

                            b1.WithOwner()
                                .HasForeignKey("OrderlineId");
                        });

                    b.OwnsOne("buyyu.Domain.Shared.ProductId", "ProductId", b1 =>
                        {
                            b1.Property<Guid>("OrderlineId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ProductId");

                            b1.HasKey("OrderlineId");

                            b1.ToTable("OrderLines");

                            b1.WithOwner()
                                .HasForeignKey("OrderlineId");
                        });

                    b.OwnsOne("buyyu.Domain.Shared.Quantity", "Qty", b1 =>
                        {
                            b1.Property<Guid>("OrderlineId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("Qty");

                            b1.HasKey("OrderlineId");

                            b1.ToTable("OrderLines");

                            b1.WithOwner()
                                .HasForeignKey("OrderlineId");
                        });

                    b.Navigation("Order");

                    b.Navigation("Price");

                    b.Navigation("ProductId");

                    b.Navigation("Qty");
                });

            modelBuilder.Entity("buyyu.Domain.Payment.PaymentRoot", b =>
                {
                    b.OwnsOne("buyyu.Domain.Shared.Money", "PaidAmount", b1 =>
                        {
                            b1.Property<Guid>("PaymentRootId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("PaidAmount");

                            b1.Property<string>("Currency")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PaidAmount_Currency");

                            b1.HasKey("PaymentRootId");

                            b1.ToTable("Payments");

                            b1.WithOwner()
                                .HasForeignKey("PaymentRootId");
                        });

                    b.OwnsOne("buyyu.Domain.Shared.OrderId", "OrderId", b1 =>
                        {
                            b1.Property<Guid>("PaymentRootId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("OrderId");

                            b1.HasKey("PaymentRootId");

                            b1.ToTable("Payments");

                            b1.WithOwner()
                                .HasForeignKey("PaymentRootId");
                        });

                    b.Navigation("OrderId");

                    b.Navigation("PaidAmount");
                });

            modelBuilder.Entity("buyyu.Domain.Product.ProductRoot", b =>
                {
                    b.OwnsOne("buyyu.Domain.Product.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("ProductRootId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Description");

                            b1.HasKey("ProductRootId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductRootId");

                            b1.HasData(
                                new
                                {
                                    ProductRootId = new Guid("de679c55-4c13-4fe7-91b4-69cbce3223a2"),
                                    Value = "Implement an ergonomic seating solution for your office with this maroon multipurpose chair. The included tilt tension knob lets you calibrate the tilt and recline resistance to your desired configuration, while the adjustable seat and armrests optimize your seating position for correct posture."
                                },
                                new
                                {
                                    ProductRootId = new Guid("32f75bce-16a0-4070-9fac-4289678c191f"),
                                    Value = "The Lockland Big & Tall bonded leather managers chair offers top quality comfort, multiple adjustment features."
                                },
                                new
                                {
                                    ProductRootId = new Guid("bcbc1851-6317-4022-be62-53d29c04bcda"),
                                    Value = "Carve out a personal workspace with this storage desk. The simple design and classic mid-century modern details make this desk perfect for modern decor themes or casual open office settings, and the rectangular desktop provides space for a laptop and peripherals."
                                },
                                new
                                {
                                    ProductRootId = new Guid("5ca659b1-25b1-45c1-9755-3a3cd8591b9e"),
                                    Value = "The Techni Mobili Complete Workstation Desk is everything you need in a computer desk and stay organized."
                                });
                        });

                    b.OwnsOne("buyyu.Domain.Product.ProductName", "Name", b1 =>
                        {
                            b1.Property<Guid>("ProductRootId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Name");

                            b1.HasKey("ProductRootId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductRootId");

                            b1.HasData(
                                new
                                {
                                    ProductRootId = new Guid("de679c55-4c13-4fe7-91b4-69cbce3223a2"),
                                    Value = "Office Chair Beta"
                                },
                                new
                                {
                                    ProductRootId = new Guid("32f75bce-16a0-4070-9fac-4289678c191f"),
                                    Value = "Office Chair Manager"
                                },
                                new
                                {
                                    ProductRootId = new Guid("bcbc1851-6317-4022-be62-53d29c04bcda"),
                                    Value = "Vintage Desk"
                                },
                                new
                                {
                                    ProductRootId = new Guid("5ca659b1-25b1-45c1-9755-3a3cd8591b9e"),
                                    Value = "Desk Techni"
                                });
                        });

                    b.OwnsOne("buyyu.Domain.Shared.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("ProductRootId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Price");

                            b1.Property<string>("Currency")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Price_Currency");

                            b1.HasKey("ProductRootId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductRootId");

                            b1.HasData(
                                new
                                {
                                    ProductRootId = new Guid("de679c55-4c13-4fe7-91b4-69cbce3223a2"),
                                    Amount = 169m,
                                    Currency = "EUR"
                                },
                                new
                                {
                                    ProductRootId = new Guid("32f75bce-16a0-4070-9fac-4289678c191f"),
                                    Amount = 263m,
                                    Currency = "EUR"
                                },
                                new
                                {
                                    ProductRootId = new Guid("bcbc1851-6317-4022-be62-53d29c04bcda"),
                                    Amount = 305m,
                                    Currency = "EUR"
                                },
                                new
                                {
                                    ProductRootId = new Guid("5ca659b1-25b1-45c1-9755-3a3cd8591b9e"),
                                    Amount = 295m,
                                    Currency = "EUR"
                                });
                        });

                    b.Navigation("Description");

                    b.Navigation("Name");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("buyyu.Domain.Warehouse.WarehouseRoot", b =>
                {
                    b.OwnsOne("buyyu.Domain.Shared.Quantity", "QtyInStock", b1 =>
                        {
                            b1.Property<Guid>("WarehouseRootProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("QtyInStock");

                            b1.HasKey("WarehouseRootProductId");

                            b1.ToTable("Warehouses");

                            b1.WithOwner()
                                .HasForeignKey("WarehouseRootProductId");

                            b1.HasData(
                                new
                                {
                                    WarehouseRootProductId = new Guid("de679c55-4c13-4fe7-91b4-69cbce3223a2"),
                                    Value = 213
                                },
                                new
                                {
                                    WarehouseRootProductId = new Guid("32f75bce-16a0-4070-9fac-4289678c191f"),
                                    Value = 75
                                },
                                new
                                {
                                    WarehouseRootProductId = new Guid("bcbc1851-6317-4022-be62-53d29c04bcda"),
                                    Value = 179
                                },
                                new
                                {
                                    WarehouseRootProductId = new Guid("5ca659b1-25b1-45c1-9755-3a3cd8591b9e"),
                                    Value = 150
                                });
                        });

                    b.Navigation("QtyInStock");
                });

            modelBuilder.Entity("buyyu.Domain.Order.OrderRoot", b =>
                {
                    b.Navigation("Lines");
                });
#pragma warning restore 612, 618
        }
    }
}
